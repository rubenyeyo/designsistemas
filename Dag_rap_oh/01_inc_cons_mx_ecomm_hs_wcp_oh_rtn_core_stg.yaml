#------------------------------------------------------------#
# Propósito  : Carga incremental consolidada RO + ROL (Return Orders + Return Order Lines)
# CORREGIDO  : RO como tabla principal (driving table) según query original
# Proyecto   : One Hallway
#------------------------------------------------------------#
---
queries: |
  SET spark.kryoserializer.buffer.max.mb=64;
  SET spark.sql.parquet.int96RebaseModeInWrite=LEGACY;

  CREATE DATABASE IF NOT EXISTS stg_$target_schema
  LOCATION '$stg_bucket/stg_$target_schema/stg_$target_stg1';
  
  DROP TABLE IF EXISTS stg_$target_schema.stg_$target_stg1;
  CREATE TABLE IF NOT EXISTS stg_$target_schema.stg_$target_stg1 (
    -- Campos de RO (Return Order) - Tabla principal según query original
    tenant_id                    STRING,
    rtn_order_num                STRING,
    sales_order_num              STRING,
    rtn_cre_ts                   TIMESTAMP,
    fecha_creacion               DATE,
    return_order_no              STRING,
    createduserid                STRING,
    cre_user                     STRING,
    agnt_cd                      STRING,
    rtn_upd_ts                   TIMESTAMP,
    
    -- Campos de ROL (Return Order Line) - LEFT JOIN desde RO
    rtn_line_num                 STRING,
    sales_order_line_num         STRING,
    return_order_line            STRING,
    unit_price                   DOUBLE,
    precio_unitario              DOUBLE,
    return_reason                STRING,
    rtn_rsn_desc                 STRING,
    extn_return_mode             STRING,
    shpmnt_num                   STRING,
    refund_at_store              STRING,
    extn_additional_return_reason STRING,
    monto_devolucion             DOUBLE,
    return_line_key              STRING,
    return_header_key            STRING,
    rol_src_cre_ts               TIMESTAMP,
    chnl_nm                      STRING,
    line_tot_amt                 DOUBLE,
    rtn_qty                      INT,
    rol_src_upd_ts               TIMESTAMP,
    rcv_store_org_cd             STRING,
    
    -- Control técnico consolidado
    src_upd_ts                   TIMESTAMP
  )
  STORED AS PARQUET
  LOCATION '$stg_bucket/stg_$target_schema/stg_$target_stg1';

  -- Carga consolidada RO + ROL con RO como tabla principal (según query original)
  INSERT OVERWRITE TABLE stg_$target_schema.stg_$target_stg1
  SELECT
    -- Campos de RO (Return Order) - Tabla principal
    RO.tenant_id,
    RO.rtn_order_num,
    RO.sales_order_num,
    RO.RTN_CRE_TS as rtn_cre_ts,
    DATE(RO.RTN_CRE_TS) as fecha_creacion,
    RO.rtn_order_num as return_order_no,
    RO.AGNT_CD as createduserid,
    RO.CRE_USER as cre_user,
    RO.agnt_cd,
    RO.RTN_UPD_TS as rtn_upd_ts,
    
    -- Campos de ROL (Return Order Line) - LEFT JOIN desde RO
    ROL.rtn_line_num,
    ROL.sales_order_line_num,
    ROL.rtn_line_num as return_order_line,
    ROL.unit_price,
    ROL.unit_price as precio_unitario,
    ROL.RTN_RSN_DESC as return_reason,
    ROL.rtn_rsn_desc,
    IF(ROL.RTN_MODE_NM IS NULL, 'Keep it', ROL.RTN_MODE_NM) AS extn_return_mode,
    ROL.shpmnt_num,
    IF(ROL.RTN_MODE_NM = 'Collection Via Carrier', NULL, ROL.RTN_MODE_NM) as refund_at_store,
    ROL.rtn_rsn_desc as extn_additional_return_reason,
    ROL.LINE_TOT_AMT as monto_devolucion,
    
    -- Keys transaccionales (solo cuando ROL existe)
   
    CONCAT(RO.tenant_id, '_', RO.rtn_order_num, '_', ROL.rtn_line_num) as RETURN_LINE_KEY,
    CONCAT(RO.tenant_id, '_', RO.rtn_order_num) as return_header_key,
    
    -- Campos técnicos ROL
    ROL.src_cre_ts as rol_src_cre_ts,
    ROL.chnl_nm,
    ROL.line_tot_amt,
    ROL.rtn_qty,
    ROL.src_upd_ts as rol_src_upd_ts,
    ROL.rcv_store_org_cd,
    
    -- Control técnico consolidado - más reciente entre RO y ROL
    GREATEST(
      COALESCE(RO.RTN_UPD_TS, CAST('1900-01-01' AS TIMESTAMP)),
      COALESCE(ROL.src_upd_ts, CAST('1900-01-01' AS TIMESTAMP))
    ) AS src_upd_ts

  FROM $source_schema1.$source_target1 RO  -- rtn_order (TABLA PRINCIPAL según query original)
  LEFT JOIN $source_schema1.$source_target2 ROL  -- rtn_order_line (LEFT JOIN desde RO)
    ON RO.tenant_id = ROL.tenant_id 
    AND RO.rtn_order_num = ROL.rtn_order_num
  
  WHERE CASE 
    WHEN '$flag_load_type' = 'hist' THEN (
      (RO.RTN_UPD_TS >= CAST('$start_date_hist' AS DATE) AND
       RO.RTN_UPD_TS <= CAST('$end_date_hist' AS DATE)) OR
      (ROL.src_upd_ts >= CAST('$start_date_hist' AS DATE) AND
       ROL.src_upd_ts <= CAST('$end_date_hist' AS DATE))
    )
    ELSE (
      RO.RTN_UPD_TS >= date_sub(current_date(), $incremental_days_history) OR
      ROL.src_upd_ts >= date_sub(current_date(), $incremental_days_history)
    )
  END;