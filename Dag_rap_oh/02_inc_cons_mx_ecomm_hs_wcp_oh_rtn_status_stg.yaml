#------------------------------------------------------------#
# Propósito  : Carga incremental consolidada ROSL + ROGL + RCL + ROGLC 
#              (Status, Group Lines, Receipt Lines, Carrier Labels)
# Proyecto   : One Hallway
# CORREGIDO  : Nombres de columnas timestamp según esquema real de las tablas
#------------------------------------------------------------#
---
queries: |
  SET spark.kryoserializer.buffer.max.mb=64;
  SET spark.sql.parquet.int96RebaseModeInWrite=LEGACY;

  DROP TABLE IF EXISTS stg_$target_schema.stg_$target_stg2;

  CREATE TABLE IF NOT EXISTS stg_$target_schema.stg_$target_stg2 (
    -- Campos de ROSL (Return Order Status Line) - Con último status
    tenant_id                STRING,
    rtn_order_num            STRING,
    rtn_line_num             STRING,
    sales_order_num          STRING,
    sales_order_line_num     STRING,
    agnt_cd                  STRING,
    sts_cd                   STRING,
    status_key               INT,
    status_comercial         STRING,
    src_cre_ts               TIMESTAMP,
    sts_desc                 STRING,
    
    -- Campos de ROGL (Return Order Group Line)
    piezas_dev               INT,
    
    -- Campos de RCL (Return Receipt Line)
    receipt_date             DATE,
    disp_cd                  STRING,
    
    -- Campos de ROGLC (Return Order Group Label Carrier)
    guia_embarque_rtn        STRING,
    carrier_nm               STRING,
    trk_nbr                  STRING,
    
    -- Control técnico
    src_upd_ts               TIMESTAMP
  )
  STORED AS PARQUET
  LOCATION '$stg_bucket/stg_$target_schema/stg_$target_stg2';

  -- Obtener IDs de devoluciones modificadas desde paso anterior para procesamiento incremental
  DROP TABLE IF EXISTS stg_$target_schema.stg_${target_stg2}_rtn_ids;
  CREATE TABLE stg_$target_schema.stg_${target_stg2}_rtn_ids AS
  SELECT tenant_id, rtn_order_num, rtn_line_num, sales_order_num, sales_order_line_num
  FROM stg_$target_schema.stg_$target_stg1
  GROUP BY tenant_id, rtn_order_num, rtn_line_num, sales_order_num, sales_order_line_num;

  -- Tabla temporal para obtener el último status por return line (Window Function)
  DROP TABLE IF EXISTS stg_$target_schema.stg_${target_stg2}_status_latest;
  CREATE TABLE stg_$target_schema.stg_${target_stg2}_status_latest AS
  SELECT 
    sales_order_num,
    sales_order_line_num,
    rtn_line_num,
    rtn_order_num,
    agnt_cd,
    sts_cd,
    tenant_id,
    sts_desc,
    src_cre_ts,
    src_upd_ts,
    ROW_NUMBER() OVER (
      PARTITION BY rtn_order_num, rtn_line_num 
      ORDER BY src_cre_ts DESC
    ) as row_num
  FROM $source_schema1.$source_target3  -- rtn_order_sts_line
  WHERE CASE 
    WHEN '$flag_load_type' = 'hist' THEN (
      (src_upd_ts >= CAST('$start_date_hist' AS DATE) AND
       src_upd_ts <= CAST('$end_date_hist' AS DATE))
    )
    ELSE (
      src_upd_ts >= date_sub(current_date(), $incremental_days_history)
    )
  END;

  -- Carga consolidada con todos los joins críticos
  INSERT OVERWRITE TABLE stg_$target_schema.stg_$target_stg2
  SELECT
    -- Campos de ROSL (Return Order Status Line) - Último status
    ROSL.tenant_id,
    ROSL.rtn_order_num,
    ROSL.rtn_line_num,
    ROSL.sales_order_num,
    ROSL.sales_order_line_num,
    ROSL.agnt_cd,
    ROSL.sts_cd,
    CASE WHEN ROSL.sts_cd = '9000.0' THEN 0 ELSE 3 END AS status_key,
    CASE WHEN ROSL.sts_cd = '9000.0' THEN 'RETURN CANCELLED' ELSE 'DEVOLUCION' END AS status_comercial,
    ROSL.src_cre_ts,
    ROSL.sts_desc,
    
    -- Campos de ROGL (Return Order Group Line)
    ROGL.rtn_qty AS piezas_dev,
    
    -- Campos de RCL (Return Receipt Line)
    RCL.rtn_rcpt_dt AS receipt_date,
    RCL.dspstn_mthd_type_nm AS disp_cd,
    
    -- Campos de ROGLC (Return Order Group Label Carrier)
    ROGLC.trk_nbr AS guia_embarque_rtn,
    ROGLC.carrier_nm,
    ROGLC.trk_nbr,
    
    -- Control técnico - usar el más reciente - COLUMNAS CORREGIDAS SEGÚN ERROR
    GREATEST(
      COALESCE(ROSL.src_upd_ts, CAST('1900-01-01' AS TIMESTAMP)),
      COALESCE(ROGL.src_rcv_ts, CAST('1900-01-01' AS TIMESTAMP)),    -- CORREGIDO: usar src_rcv_ts 
      COALESCE(RCL.upd_ts, CAST('1900-01-01' AS TIMESTAMP)),         -- CORREGIDO: usar upd_ts  
      COALESCE(ROGLC.src_rcv_ts, CAST('1900-01-01' AS TIMESTAMP))    -- CORREGIDO: usar src_rcv_ts
    ) AS src_upd_ts

  FROM stg_$target_schema.stg_${target_stg2}_rtn_ids ids
  
  -- JOIN principal con último status (ROSL) - Window function aplicada
  LEFT JOIN (
    SELECT * FROM stg_$target_schema.stg_${target_stg2}_status_latest 
    WHERE row_num = 1
  ) ROSL
    ON ids.tenant_id = ROSL.tenant_id 
    AND ids.rtn_order_num = ROSL.rtn_order_num 
    AND ids.rtn_line_num = ROSL.rtn_line_num
  
  -- JOIN con ROGL (Return Order Group Line) - Piezas devueltas
  LEFT JOIN $source_schema1.$source_target6 ROGL  -- rtn_order_grp_line
    ON ids.tenant_id = ROGL.tenant_id 
    AND ids.rtn_order_num = ROGL.rtn_order_num 
    AND ids.rtn_line_num = ROGL.rtn_line_num
  
  -- JOIN con RCL (Return Receipt Line) - Fechas y disposición
  LEFT JOIN $source_schema1.$source_target4 RCL   -- rtn_rcpt_line
    ON ids.tenant_id = RCL.tenant_id 
    AND ids.rtn_order_num = RCL.rtn_order_num 
    AND ids.rtn_line_num = RCL.rtn_line_num
  
  -- JOIN con ROGLC (Return Order Group Label Carrier) - Tracking
  LEFT JOIN $source_schema1.$source_target5 ROGLC  -- rtn_order_grp_lbl_carr
    ON ids.tenant_id = ROGLC.tenant_id 
    AND ids.rtn_order_num = ROGLC.rtn_order_num
    AND ids.sales_order_num = ROGLC.sales_order_num;

  -- Limpiar tablas temporales
  DROP TABLE IF EXISTS stg_$target_schema.stg_${target_stg2}_rtn_ids;
  DROP TABLE IF EXISTS stg_$target_schema.stg_${target_stg2}_status_latest;